# -*- coding: utf-8 -*-
"""One Client Run.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DeyK2d5eipHhA2tkGuImjQq10i-akLqu

## Import
"""
import streamlit as st
import numpy as np
import pandas as pd
import lightgbm as lgb
import pickle
from sklearn.preprocessing import LabelEncoder, PolynomialFeatures, MinMaxScaler, OneHotEncoder
from sklearn.impute import SimpleImputer as Imputer

import warnings
warnings.filterwarnings('ignore')

st.header('Import')
st.code("""
import streamlit as st
import numpy as np
import pandas as pd
import lightgbm as lgb
import pickle

import warnings
warnings.filterwarnings('ignore')
""")

st.code("""
app_test = pd.read_csv('application_test.csv')
app_test.head()
""")
app_test = pd.read_csv('application_test.csv')
st.dataframe(app_test.head())

st.code("""
app_test = app_test.iloc[0:1]
app_test
""")
app_test = app_test.iloc[0:1]
st.dataframe(app_test)

st.header('Categorical features')

st.code("""
categorical = ['NAME_CONTRACT_TYPE', 'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY',
               'NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',
               'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'OCCUPATION_TYPE',
               'WEEKDAY_APPR_PROCESS_START', 'ORGANIZATION_TYPE', 'FONDKAPREMONT_MODE',
               'HOUSETYPE_MODE', 'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE']
with open('encoder.pkl', 'rb') as f:
    encoder = pickle.load(f)
""")
categorical = ['NAME_CONTRACT_TYPE', 'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY',
               'NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',
               'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'OCCUPATION_TYPE',
               'WEEKDAY_APPR_PROCESS_START', 'ORGANIZATION_TYPE', 'FONDKAPREMONT_MODE',
               'HOUSETYPE_MODE', 'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE']
with open('encoder.pkl', 'rb') as f:
    encoder = pickle.load(f)


st.code("""
one_hot_encoded = encoder.transform(app_test[categorical])
one_hot_df = pd.DataFrame(one_hot_encoded, columns=encoder.get_feature_names_out(categorical))
app_test = pd.concat([app_test.drop(categorical, axis=1), one_hot_df], axis=1)
app_test.shape
""")
one_hot_encoded = encoder.transform(app_test[categorical])
one_hot_df = pd.DataFrame(one_hot_encoded, columns=encoder.get_feature_names_out(categorical))
app_test = pd.concat([app_test.drop(categorical, axis=1), one_hot_df], axis=1)
st.write(app_test.shape)


st.header('Numerical features')

st.code("""
app_test['DAYS_EMPLOYED_ANOM'] = app_test["DAYS_EMPLOYED"] == 365243
app_test["DAYS_EMPLOYED"].replace({365243: np.nan}, inplace=True)
print(
    'There are %d anomalies in the test data out of %d entries' % (app_test["DAYS_EMPLOYED_ANOM"].sum(), len(app_test)))

app_test['DAYS_BIRTH'] = abs(app_test['DAYS_BIRTH'])
""")

app_test['DAYS_EMPLOYED_ANOM'] = app_test["DAYS_EMPLOYED"] == 365243
app_test["DAYS_EMPLOYED"].replace({365243: np.nan}, inplace=True)
print(
    'There are %d anomalies in the test data out of %d entries' % (app_test["DAYS_EMPLOYED_ANOM"].sum(), len(app_test)))

app_test['DAYS_BIRTH'] = abs(app_test['DAYS_BIRTH'])


st.header('Additional variables')

st.code("""
app_test_domain = app_test.copy()

app_test_domain['CREDIT_INCOME_PERCENT'] = app_test_domain['AMT_CREDIT'] / app_test_domain['AMT_INCOME_TOTAL']
app_test_domain['ANNUITY_INCOME_PERCENT'] = app_test_domain['AMT_ANNUITY'] / app_test_domain['AMT_INCOME_TOTAL']
app_test_domain['CREDIT_TERM'] = app_test_domain['AMT_ANNUITY'] / app_test_domain['AMT_CREDIT']
app_test_domain['DAYS_EMPLOYED_PERCENT'] = app_test_domain['DAYS_EMPLOYED'] / app_test_domain['DAYS_BIRTH']
""")

app_test_domain = app_test.copy()

app_test_domain['CREDIT_INCOME_PERCENT'] = app_test_domain['AMT_CREDIT'] / app_test_domain['AMT_INCOME_TOTAL']
app_test_domain['ANNUITY_INCOME_PERCENT'] = app_test_domain['AMT_ANNUITY'] / app_test_domain['AMT_INCOME_TOTAL']
app_test_domain['CREDIT_TERM'] = app_test_domain['AMT_ANNUITY'] / app_test_domain['AMT_CREDIT']
app_test_domain['DAYS_EMPLOYED_PERCENT'] = app_test_domain['DAYS_EMPLOYED'] / app_test_domain['DAYS_BIRTH']


st.header('Light Gradient Boosting Machine')
st.code("""
with open('imputer.pkl', 'rb') as f:
    imputer = pickle.load(f)
with open('scaler.pkl', 'rb') as f:
    scaler = pickle.load(f)
""")

with open('imputer.pkl', 'rb') as f:
    imputer = pickle.load(f)
with open('scaler.pkl', 'rb') as f:
    scaler = pickle.load(f)


st.code("""
domain_features_names = list(app_test_domain.columns)

domain_features_test = imputer.transform(app_test_domain)

domain_features_test = scaler.transform(domain_features_test)

bst = lgb.Booster(model_file='model.txt')

bst.predict(domain_features_test)
""")

domain_features_names = list(app_test_domain.columns)

domain_features_test = imputer.transform(app_test_domain)

domain_features_test = scaler.transform(domain_features_test)

bst = lgb.Booster(model_file='model.txt')

print(bst.predict(domain_features_test))
